<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Mon Apr 18 08:46:17 EDT 2022-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Registry">

	
	<resultMap id="registryResult" type="registry">
		<result property="id" column="id"/>
		<result property="lastUpdateTime" column="lastUpdateTime"/>
		<result property="lastUsedDbIdentifer" column="lastUsedDBIdentifer"/>
		<result property="lastUsedHistoryIdentifer" column="lastUsedHistoryIdentifer"/>
	</resultMap>
	
	<resultMap id="registryEntry" type="registryEntry">
		<result property="id" column="registryGuid"/>
		<result property="activationDate" column="activationDate" />
		<result property="baseRevision" column="baseRevision"/>
		<result property="dbName" column="dbName"/>
		<result property="dbSchemaDescription" column="dbSchemaDescription"/>
		<result property="dbSchemaVersion" column="dbSchemaVersion"/>
		<result property="dbUri" column="dbURI"/>
		<result property="deactivationDate" column="deactivationDate"/>
		<result property="fixedAtRevision" column="fixedAtRevision" />
		<result property="isLocked" column="isLocked"/>
		<result property="lastUpdateDate" column="lastUpdateDate"/>
		<result property="prefix" column="prefix"/>
		<result property="stagingPrefix" column="stagingPrefix"/>
		<result property="resourceType" column="resourceType"/>
		<result property="resourceVersion" column="resourceVersion"/>
		<result property="resourceUri" column="resourceURI"/>
		<result property="status" column="status"/>
		<result property="tag" column="tag"/>
		<result property="supplementsUri" column="supplementsUri"/>
		<result property="supplementsVersion" column="supplementsVersion"/>
	</resultMap>
	
	<update id="updateLastUpdateTime" parameterType="org.lexevs.dao.database.ibatis.registry.parameter.InsertOrUpdateRegistryBean">
		UPDATE 
			${defaultPrefix}registryMetaData registryMetaData
			registryMetaData.lastUpdateTime
			<set>
			<if test="lastUpdateTime != null">
				lastUpdateTime = #{registry.lastUpdateTime},
			</if>
			</set>
		WHERE 
			id = #{registry.id}		
     </update>
     
     
   <select id="getRegistryMetaData" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultMap="registryMetaData">
   		SELECT 
   			id,
   			lastUpdateTime,
   			lastUsedDBIdentifer,
   			lastUsedHistoryIdentifer
   		FROM
   			${defaultPrefix}registryMetaData
   		WHERE
   			id = ${param1}
   </select>
   
      	
    <delete id="deleteRegistryEntry" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter">
		DELETE FROM
			${defaultPrefix}registry
		WHERE
			relationGuid = #{param1}
	</delete>
     
   <insert id="insertRegistryEntry" parameterType="org.lexevs.dao.database.ibatis.registry.parameter.InsertOrUpdateRegistryEntryBean">
		INSERT INTO ${defaultPrefix}registry(
		registryGuid,
		activationDate,
		baseRevision,
		dbName,
		dbSchemaDescription,
		dbSchemaVersion,
		dbURI,
		deactivationDate,
		fixedAtRevision,
		isLocked,
		lastUpdateDate,
		prefix,
		stagingPrefix,
		resourceType,
		resourceVersion,
		resourceURI,
		status,
		tag,
		supplementsUri,
		supplementsVersion
		
		) VALUES (
		
		#{id,jdbcType=VARCHAR}, 
		#{activationDate,jdbcType=TIMESTAMP}, 
		#{baseRevision,jdbcType=VARCHAR}, 
		#{dbName,jdbcType=VARCHAR}, 
		#{dbSchemaDescription,jdbcType=VARCHAR}, 
		#{dbSchemaVersion,jdbcType=VARCHAR}, 
		#{dbUri,jdbcType=VARCHAR}, 
		#{deactivationDate,jdbcType=TIMESTAMP}, 
		#{fixedAtRevision,jdbcType=VARCHAR}, 
		#{isLocked,jdbcType=CHAR}, 
		#{lastUpdateDate,jdbcType=TIMESTAMP}, 
		#{prefix,jdbcType=VARCHAR}, 
		#{stagingPrefix,jdbcType=VARCHAR}, 
		#{resourceType,jdbcType=VARCHAR}, 
		#{resourceVersion,jdbcType=VARCHAR}, 
		#{resourceUri,jdbcType=VARCHAR}, 
		#{status,jdbcType=VARCHAR}, 
		#{tag,jdbcType=VARCHAR}, 
		#{supplementsUri,jdbcType=VARCHAR}
		)
  </insert>
  
     <select id="getRegistryEntryByUriAndVersion" parameterType="org.lexevs.dao.database.ibatis.registry.parameter.InsertOrUpdateRegistryEntryBean" resultMap="registryEntry">
   		SELECT 
   		registryGuid AS id,
		activationDate,
		baseRevision,
		dbName,
		dbSchemaDescription,
		dbSchemaVersion,
		dbURI,
		deactivationDate,
		fixedAtRevision,
		isLocked,
		lastUpdateDate,
		prefix,
		stagingPrefix,
		resourceType,
		resourceVersion,
		resourceURI AS resourceUri,
		status,
		tag,
		supplementsUri,
		supplementsVersion
   		FROM
   			${defaultPrefix}registry
   		WHERE
   			resourceURI = ${resoruceUri}
   			AND
   			resourceVersion = ${resourceVersion}
   </select>

   
   	<select id="getRegistryEntryByUriAndTypes" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterCollection" resultType="String">
   		SELECT 
   		registryGuid AS id,
		activationDate,
		baseRevision,
		dbName,
		dbSchemaDescription,
		dbSchemaVersion,
		dbURI,
		deactivationDate,
		fixedAtRevision,
		isLocked,
		lastUpdateDate,
		prefix,
		stagingPrefix,
		resourceType,
		resourceVersion,
		resourceURI AS resourceUri,
		status,
		tag,
		supplementsUri,
		supplementsVersion
   		FROM
   			${prefix}registry
		WHERE
			resourceURI = #{param1}

		AND
		   resourceType IN (  
		   	<foreach collection="param2" item="item" separator=",">
        		#{item}
    		</foreach> )
	</select>
   
  	<select id="getAssociationPredicateKeysForRelationsId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultMap="Common.uidResult">
   		SELECT
   			associationPredicateGuid AS uidKey
   		FROM
   			${prefix}associationPredicate
		WHERE
			relationGuid = 
			#{param1}
   </select>
   
   <select id="getRelationsKey" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple" resultMap="Common.uidResult">
   		SELECT
   			relationGuid AS uidKey
   		FROM
   			${prefix}relation
		WHERE
			codingSchemeGuid = 
			#{param1}
		AND
			containerName = 
			#{param2}		
   </select>
   
    <select id="getRelationsKeysForCodingSchemeId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultMap="Common.uidResult">
   		SELECT
   			relationGuid AS uidKey
   		FROM
   			${prefix}relation
		WHERE
			codingSchemeGuid = 
			#{param1}	
   </select>
   
   <select id="getRelationsNamesForCodingSchemeId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultType="string">
   		SELECT
   			containerName
   		FROM
   			${prefix}relation
		WHERE
			codingSchemeGuid = 
			#{param1}	
   </select>
   
   <select id="getAssociationPredicateNameForId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultType="string">
   		SELECT
   			associationName
   		FROM
   			${prefix}associationPredicate
   		WHERE
			associationPredicateGuid = 
			#{param1}
   </select> 
   
   <select id="getAssociationPredicateForId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultMap="associationPredicateResult">
   		SELECT
   			associationName
   		FROM
   			${prefix}associationPredicate
   		WHERE
			associationPredicateGuid = 
			#{param1}
   </select> 
   
   <sql id="getRelationsFragment">
    	SELECT
   			relation.containerName,
   			relation.isMapping,
   			relation.representsVersion,
   			relation.sourceCodingScheme,
   			relation.sourceCodingSchemeVersion,
   			relation.targetCodingScheme,
   			relation.targetCodingSchemeVersion,
   			relation.description,
   			relation.isActive,
   			relation.owner,
   			relation.status,
   			relation.effectiveDate,
   			relation.expirationDate,
   			
   			entryState.changeType,
  			entryState.relativeOrder,
  			entryState.relativeOrder,
  			
  			currentRevision.revisionId AS currentRevisionId,
  			previousRevision.revisionId AS previousRevisionId
  		
  		FROM
  			${prefix}relation relation
  			
  		LEFT JOIN
			${actualTableSetPrefix}entryState entryState
		ON
			relation.entryStateGuid =
			entryState.entryStateGuid	
			
		LEFT JOIN
			${defaultPrefix}revision currentRevision
		ON 
			entryState.revisionGuid = currentRevision.revisionGuid
			
		LEFT JOIN
			${defaultPrefix}revision previousRevision
		ON 
			entryState.prevRevisionGuid = previousRevision.revisionGuid
   </sql>
   
   <select id="getRelationsForUid" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple" resultMap="relationsResult">
   		<include refid="getRelationsFragment"/>
   		WHERE
			relation.codingSchemeGuid = #{param1}
		AND
			relation.relationGuid = #{param2}
   </select>
 
   <select id="getRelationsForUidAndRevisionId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTriple" resultMap="relationsResult">
   		<include refid="getRelationsFragment"/>
   		WHERE
			relation.codingSchemeGuid = #{param1}
		AND
			relation.relationGuid = #{param2}
		AND
			currentRevision.revisionId = #{param3}
   </select>
   
   <select id="getAssociationPredicateUIdByContainerName" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTriple" resultMap="Common.uidResult">
   		SELECT
   			assoc.associationPredicateGuid AS uidKey
   		FROM
   			${prefix}associationPredicate assoc
   		INNER JOIN
   			${prefix}relation rel
   		ON
   			rel.relationGuid = assoc.relationGuid
		WHERE
			rel.codingSchemeGuid = #{param1}
		AND
			rel.containerName = #{param2}
		AND
			assoc.associationName = #{param3}
   </select> 
     
	<select id="getAssociationPredicateUIdByContainerUId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple" resultMap="Common.uidResult">
   		SELECT
   			assoc.associationPredicateGuid AS uidKey
   		FROM
   			${prefix}associationPredicate assoc   			
		WHERE
			assoc.relationGuid = #{param1}
		AND
			assoc.associationName = #{param2}
   </select> 
     
   <update id="updateRelationByUId" parameterType="org.lexevs.dao.database.ibatis.association.parameter.InsertOrUpdateRelationsBean">
		UPDATE 
			${prefix}relation relation
		<set>
			<if test="relations.isMapping !=null">
				isMapping = #{relations.isMapping},
			</if>
		    <if test="relations.representsVersion !=null">
				representsVersion = #{relations.representsVersion},
			</if>
			<if test="relations.sourceCodingScheme !=null">
				sourceCodingScheme = #{relations.sourceCodingScheme},
			</if>
			<if test="relations.sourceCodingSchemeVersion !=null">
				sourceCodingSchemeVersion = #{relations.sourceCodingSchemeVersion},
			</if>
			<if test="relations.targetCodingScheme !=null">
				targetCodingScheme = #{relations.targetCodingScheme},
			</if>
			<if test="relations.targetCodingSchemeVersion !=null">
				targetCodingSchemeVersion = #{relations.targetCodingSchemeVersion},
			</if>
			<if test="relations.entityDescription.content !=null">
				description = #{relations.entityDescription.content},
			</if>
			<if test="relations.entryStateUId !=null">
				entryStateGuid = #{entryStateUId}
			</if>
		</set>

		WHERE 
			relation.relationGuid = #{uid}
		AND
			relation.codingSchemeGuid = #{codingSchemeUId}
 	</update>
 	
   <update id="updateRelationVersionableChangesByUId" parameterType="org.lexevs.dao.database.ibatis.association.parameter.InsertOrUpdateRelationsBean">
		UPDATE 
			${prefix}relation rel
		<set>
			<if test="relations.isActive !=null">
				isActive = #{relations.isActive},
			</if>
			<if test="relations.owner !=null">
				owner = #{relations.owner},
			</if>
			<if test="relations.status !=null">
				status = #{relations.status},
			</if>
			<if test="relations.effectiveDate !=null">
				effectiveDate = #{relations.effectiveDate},
			</if>
			<if test="relations.expirationDate !=null">
				expirationDate = #{relations.expirationDate},
			</if>
			<if test="entryStateUId !=null">
				entryStateGuid = #{entryStateUId}
			</if>
		</set>

		WHERE 
			rel.relationGuid = #{uid}
		AND
			rel.codingSchemeGuid = #{codingSchemeUId}
 	</update> 	
 	
    <delete id="deleteRelationByUId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter">
		DELETE FROM
			${prefix}relation
		WHERE
			relationGuid = #{param1}
	</delete>
	
	<select id="getEntryStateUIdByRelationUId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultMap="Common.uidResult">
		SELECT 
			entryStateGuid AS uidKey
		FROM
			${prefix}relation rel
		WHERE
			rel.relationGuid = #{param1}	
	</select>	 

	<select id="checkIfAssociationPredicateExists" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultType="string">
		SELECT 
			count(1)			
		FROM
			${prefix}associationPredicate assn
		WHERE
			assn.associationPredicateGuid = #{param1}	
	</select>	 

 	<update id="updateRelationEntryStateUId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameterTuple">
		UPDATE
			${prefix}relation
		SET
			entryStateGuid = #{param2}
		WHERE 
			relationGuid = #{param1}
 	</update>
 	
	<select id="getRelationLatestRevisionIdByUId" parameterType="org.lexevs.dao.database.ibatis.parameter.PrefixedParameter" resultType="string">
		SELECT 
			rev.revisionId
		FROM
			${prefix}relation rel,
			${prefix}entryState es,
			${defaultPrefix}revision rev
		WHERE
			rel.relationGuid = #{param1}	
		AND
			rel.entryStateGuid = es.entryStateGuid	
		AND
			es.revisionGuid = rev.revisionGuid	
	</select> 
</mapper>